{"version":3,"sources":["webpack:///src/app/conta/conta.app.component.ts","webpack:///src/app/conta/conta.module.ts","webpack:///src/app/conta/services/conta.service.ts","webpack:///src/app/conta/conta.route.ts","webpack:///src/app/conta/login/login.component.ts","webpack:///src/app/conta/login/login.component.html","webpack:///src/app/utils/generic-form-validation.ts"],"names":["ContaAppComponent","selector","template","ContaModule","declarations","imports","providers","ContaService","http","usuario","response","post","UrlServiceV1","ObterHeaderJson","pipe","extractData","serviceError","contaRouterConfig","path","component","children","ContaRoutingModule","forChild","exports","LoginComponent","fb","contaService","router","toastr","displayMessage","errors","validationMessages","username","required","password","genericValidator","loginForm","group","controlBlurs","formInputElements","map","formControl","nativeElement","subscribe","processarMensagens","dirty","valid","Object","assign","value","login","sucesso","processarSucesso","falha","processarFalha","reset","LocalStorage","salvarDadosLocaisUsuario","toast","success","onHidden","navigate","fail","error","Message","split","templateUrl","read","GenericValidator","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","touched","keys","messageKey"],"mappings":"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","file":"conta-conta-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'conta-app-root',\r\n  template: '<router-outlet></router-outlet>'\r\n})\r\nexport class ContaAppComponent { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {HttpClientModule} from '@angular/common/http'\r\n\r\n\r\n//import { LoginComponent } from './login/login.component';\r\n\r\nimport { ContaRoutingModule } from './conta.route';\r\nimport { ContaAppComponent } from './conta.app.component';\r\nimport { ContaService } from './services/conta.service';\r\n//import { ContaGuard } from './models/conta.guard';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContaAppComponent,\r\n   // LoginComponent,\r\n  ],\r\n  \r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ContaRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n    \r\n  ],\r\n  providers:[\r\n    ContaService\r\n   // ContaGuard\r\n  ]\r\n})\r\nexport class ContaModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Usuario } from '../models/usuario';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from \"rxjs/operators\";\r\nimport { BaseService } from 'src/app/services/base.service';\r\n\r\n@Injectable()\r\nexport class ContaService extends BaseService {\r\n\r\n    constructor(private http: HttpClient) { super(); }\r\n\r\n    // registrarUsuario(usuario: Usuario): Observable<Usuario> {\r\n    //     let response = this.http\r\n    //         .post(this.UrlServiceV1 + 'nova-conta', usuario, this.ObterHeaderJson())\r\n    //         .pipe(\r\n    //             map(this.extractData),\r\n    //             catchError(this.serviceError));\r\n\r\n    //     return response;\r\n    // }\r\n\r\n    login(usuario: Usuario): Observable<Usuario> {\r\n       //console.log(usuario);\r\n       let response = this.http\r\n            .post(this.UrlServiceV1+\"/conta/autenticar/\", usuario, this.ObterHeaderJson())\r\n            .pipe(\r\n                map(this.extractData),\r\n                catchError(this.serviceError));\r\n\r\n        return response;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ContaAppComponent } from './conta.app.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n\r\nconst contaRouterConfig: Routes = [\r\n    {\r\n        path: '', component: ContaAppComponent,\r\n        children: [\r\n           { path: 'login', component: LoginComponent  }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(contaRouterConfig)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class ContaRoutingModule { }","import { AfterViewInit, Component, ElementRef, OnInit, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormControlName, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CustomValidators } from 'ngx-custom-validators';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\nimport { fromEvent, merge, Observable } from 'rxjs';\r\nimport { DisplayMessage, GenericValidator, ValidationMessages } from 'src/app/utils/generic-form-validation';\r\nimport { Usuario } from '../models/usuario';\r\nimport { ContaService } from '../services/conta.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\r\n\r\n  validationMessages: ValidationMessages;\r\n  genericValidator: GenericValidator;\r\n  displayMessage: DisplayMessage = {};\r\n\r\n\r\n  errors: any[] = [];\r\n  loginForm: FormGroup;\r\n  usuario: Usuario;\r\n\r\n\r\n\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private contaService: ContaService,\r\n    private router: Router,\r\n    private toastr: ToastrService)   {\r\n\r\n      this.validationMessages = {\r\n      username: {\r\n        required: 'Informe o usuário'\r\n\r\n      },\r\n      password: {\r\n        required: 'Informe a senha'\r\n\r\n      }\r\n    };\r\n\r\n    this.genericValidator = new GenericValidator(this.validationMessages);\r\n\r\n   }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      password:['', [Validators.required]]\r\n\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n\r\n    let controlBlurs: Observable<any>[] = this.formInputElements\r\n        .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n    merge(...controlBlurs).subscribe(() => {\r\n        this.displayMessage = this.genericValidator.processarMensagens(this.loginForm);\r\n    });\r\n  }\r\n\r\n  login(){\r\n    if (this.loginForm.dirty && this.loginForm.valid){\r\n      this.usuario = Object.assign({}, this.usuario, this.loginForm.value);\r\n\r\n      //console.log(this.usuario);\r\n\r\n      this.contaService.login(this.usuario)\r\n      .subscribe(\r\n          sucesso => {this.processarSucesso(sucesso, this.usuario)},\r\n          falha => {this.processarFalha(falha)}\r\n      );\r\n\r\n\r\n    }\r\n  }\r\n\r\n  processarSucesso(response: any, usuario: Usuario){\r\n    this.loginForm.reset();\r\n    this.errors = [];\r\n\r\n    //console.log('response: ', response);\r\n    this.contaService.LocalStorage.salvarDadosLocaisUsuario(response, this.usuario);\r\n\r\n    let toast = this.toastr.success('Registro realizado com sucesso','Bem vindo!!!');\r\n    if (toast){\r\n      toast.onHidden.subscribe(()=>{\r\n        this.router.navigate(['/home']);\r\n      })\r\n    }\r\n\r\n    this.toastr.success('Login realizado com sucesso!', 'Bem Vindo!');\r\n    this.router.navigate(['/home']);\r\n\r\n  }\r\n\r\n  processarFalha(fail: any){\r\n    //console.log(fail.error.Message);\r\n    this.errors = fail.error.Message.split('\\r\\n');\r\n    this.toastr.error('Ocorreu um erro!','Opa :(');\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<div class=\"container main-container\">\r\n    <h1>Login</h1>\r\n\r\n    <!-- <form novalidate (ngSubmit)=\"login()\" [formGroup]=\"loginForm\"> -->\r\n    <form novalidate (ngSubmit)=\"login()\">\r\n\r\n        <h4>Entre na sua conta</h4>\r\n        <hr>\r\n\r\n        <!-- <div class=\"alert alert-danger\" *ngIf=\"errors.length > 0\">\r\n            <h3 id=\"msgRetorno\">Opa! Alguma coisa não deu certo:</h3>\r\n            <ul>\r\n                <li *ngFor=\"let error of errors\">{{ error }}</li>\r\n            </ul>\r\n        </div> -->\r\n\r\n        <div class=\"form-group\">\r\n            <label class=\"col-md-2 control-label\">Usuário</label>\r\n            <div class=\"col-md-10\">\r\n                <!-- <input class=\"form-control\" id=\"username\" type=\"text\" placeholder=\"Usuário (requerido)\" formControlName=\"username\" [ngClass]=\"{'is-invalid': displayMessage.username }\" /> -->\r\n                <input class=\"form-control\" id=\"username\" type=\"text\" placeholder=\"Usuário (requerido)\" formControlName=\"username\" />\r\n                <!-- <span class=\"text-danger\" *ngIf=\"displayMessage.username\">\r\n                                <p [innerHTML]=\"displayMessage.username\"></p>\r\n                            </span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label class=\"col-md-2 control-label\">Senha</label>\r\n            <div class=\"col-md-10\">\r\n                <!-- <input class=\"form-control\" id=\"password\" type=\"password\" placeholder=\"Senha (requerido)\" formControlName=\"password\" [ngClass]=\"{'is-invalid': displayMessage.password }\" /> -->\r\n                <input class=\"form-control\" id=\"password\" type=\"password\" placeholder=\"Senha (requerido)\" formControlName=\"password\"  />\r\n                <!-- <span class=\"text-danger\" *ngIf=\"displayMessage.password\">\r\n                                <p [innerHTML]=\"displayMessage.password\"></p>\r\n                            </span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <div class=\"col-md-4 col-md-offset-2\">\r\n                <span><button class=\"btn btn-success\" id=\"Login\" type=\"submit\">Login</button></span>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport class GenericValidator {\r\n    constructor(private validationMessages: ValidationMessages) { }\r\n\r\n    processarMensagens(container: FormGroup): { [key: string]: string } {\r\n        let messages = {};\r\n        for (let controlKey in container.controls) {\r\n            if (container.controls.hasOwnProperty(controlKey)) {\r\n                let c = container.controls[controlKey];\r\n\r\n                if (c instanceof FormGroup) {\r\n                    let childMessages = this.processarMensagens(c);\r\n                    Object.assign(messages, childMessages);\r\n                } else {\r\n                    if (this.validationMessages[controlKey]) {\r\n                        messages[controlKey] = '';\r\n                        if ((c.dirty || c.touched) && c.errors) {\r\n                            Object.keys(c.errors).map(messageKey => {\r\n                                if (this.validationMessages[controlKey][messageKey]) {\r\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + '<br />';\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n\r\nexport interface DisplayMessage {\r\n    [key: string]: string\r\n}\r\nexport interface ValidationMessages {\r\n    [key: string]: { [key: string]: string } \r\n}\r\n"]}