{"version":3,"sources":["./src/app/conta/conta.app.component.ts","./src/app/conta/conta.module.ts","./src/app/conta/services/conta.service.ts","./src/app/conta/conta.route.ts","./src/app/conta/login/login.component.ts","./src/app/conta/login/login.component.html","./src/app/utils/generic-form-validation.ts"],"names":[],"mappings":"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","file":"conta-conta-module-es2015.js","sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'conta-app-root',\r\n  template: '<router-outlet></router-outlet>'\r\n})\r\nexport class ContaAppComponent { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {HttpClientModule} from '@angular/common/http'\r\n\r\n\r\n//import { LoginComponent } from './login/login.component';\r\n\r\nimport { ContaRoutingModule } from './conta.route';\r\nimport { ContaAppComponent } from './conta.app.component';\r\nimport { ContaService } from './services/conta.service';\r\n//import { ContaGuard } from './models/conta.guard';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContaAppComponent,\r\n   // LoginComponent,\r\n  ],\r\n  \r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ContaRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n    \r\n  ],\r\n  providers:[\r\n    ContaService\r\n   // ContaGuard\r\n  ]\r\n})\r\nexport class ContaModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Usuario } from '../models/usuario';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from \"rxjs/operators\";\r\nimport { BaseService } from 'src/app/services/base.service';\r\n\r\n@Injectable()\r\nexport class ContaService extends BaseService {\r\n\r\n    constructor(private http: HttpClient) { super(); }\r\n\r\n    // registrarUsuario(usuario: Usuario): Observable<Usuario> {\r\n    //     let response = this.http\r\n    //         .post(this.UrlServiceV1 + 'nova-conta', usuario, this.ObterHeaderJson())\r\n    //         .pipe(\r\n    //             map(this.extractData),\r\n    //             catchError(this.serviceError));\r\n\r\n    //     return response;\r\n    // }\r\n\r\n    login(usuario: Usuario): Observable<Usuario> {\r\n       //console.log(usuario);\r\n       let response = this.http\r\n            .post(this.UrlServiceV1+\"/conta/autenticar/\", usuario, this.ObterHeaderJson())\r\n            .pipe(\r\n                map(this.extractData),\r\n                catchError(this.serviceError));\r\n\r\n        return response;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ContaAppComponent } from './conta.app.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n\r\nconst contaRouterConfig: Routes = [\r\n    {\r\n        path: '', component: ContaAppComponent,\r\n        children: [\r\n           { path: 'login', component: LoginComponent  }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(contaRouterConfig)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class ContaRoutingModule { }","import { AfterViewInit, Component, ElementRef, OnInit, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormControlName, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CustomValidators } from 'ngx-custom-validators';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\nimport { fromEvent, merge, Observable } from 'rxjs';\r\nimport { DisplayMessage, GenericValidator, ValidationMessages } from 'src/app/utils/generic-form-validation';\r\nimport { Usuario } from '../models/usuario';\r\nimport { ContaService } from '../services/conta.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\r\n\r\n  validationMessages: ValidationMessages;\r\n  genericValidator: GenericValidator;\r\n  displayMessage: DisplayMessage = {};\r\n\r\n\r\n  errors: any[] = [];\r\n  loginForm: FormGroup;\r\n  usuario: Usuario;\r\n\r\n\r\n\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private contaService: ContaService,\r\n    private router: Router,\r\n    private toastr: ToastrService)   {\r\n\r\n      this.validationMessages = {\r\n      username: {\r\n        required: 'Informe o usuário'\r\n\r\n      },\r\n      password: {\r\n        required: 'Informe a senha'\r\n\r\n      }\r\n    };\r\n\r\n    this.genericValidator = new GenericValidator(this.validationMessages);\r\n\r\n   }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      password:['', [Validators.required]]\r\n\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n\r\n    let controlBlurs: Observable<any>[] = this.formInputElements\r\n        .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n    merge(...controlBlurs).subscribe(() => {\r\n        this.displayMessage = this.genericValidator.processarMensagens(this.loginForm);\r\n    });\r\n  }\r\n\r\n  login(){\r\n    if (this.loginForm.dirty && this.loginForm.valid){\r\n      this.usuario = Object.assign({}, this.usuario, this.loginForm.value);\r\n\r\n      //console.log(this.usuario);\r\n\r\n      this.contaService.login(this.usuario)\r\n      .subscribe(\r\n          sucesso => {this.processarSucesso(sucesso, this.usuario)},\r\n          falha => {this.processarFalha(falha)}\r\n      );\r\n\r\n\r\n    }\r\n  }\r\n\r\n  processarSucesso(response: any, usuario: Usuario){\r\n    this.loginForm.reset();\r\n    this.errors = [];\r\n\r\n    //console.log('response: ', response);\r\n    this.contaService.LocalStorage.salvarDadosLocaisUsuario(response, this.usuario);\r\n\r\n    let toast = this.toastr.success('Registro realizado com sucesso','Bem vindo!!!');\r\n    if (toast){\r\n      toast.onHidden.subscribe(()=>{\r\n        this.router.navigate(['/home']);\r\n      })\r\n    }\r\n\r\n    this.toastr.success('Login realizado com sucesso!', 'Bem Vindo!');\r\n    this.router.navigate(['/home']);\r\n\r\n  }\r\n\r\n  processarFalha(fail: any){\r\n    //console.log(fail.error.Message);\r\n    this.errors = fail.error.Message.split('\\r\\n');\r\n    this.toastr.error('Ocorreu um erro!','Opa :(');\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<div class=\"container main-container\">\r\n    <h1>Login</h1>\r\n\r\n    <!-- <form novalidate (ngSubmit)=\"login()\" [formGroup]=\"loginForm\"> -->\r\n    <form novalidate (ngSubmit)=\"login()\">\r\n\r\n        <h4>Entre na sua conta</h4>\r\n        <hr>\r\n\r\n        <!-- <div class=\"alert alert-danger\" *ngIf=\"errors.length > 0\">\r\n            <h3 id=\"msgRetorno\">Opa! Alguma coisa não deu certo:</h3>\r\n            <ul>\r\n                <li *ngFor=\"let error of errors\">{{ error }}</li>\r\n            </ul>\r\n        </div> -->\r\n\r\n        <div class=\"form-group\">\r\n            <label class=\"col-md-2 control-label\">Usuário</label>\r\n            <div class=\"col-md-10\">\r\n                <!-- <input class=\"form-control\" id=\"username\" type=\"text\" placeholder=\"Usuário (requerido)\" formControlName=\"username\" [ngClass]=\"{'is-invalid': displayMessage.username }\" /> -->\r\n                <input class=\"form-control\" id=\"username\" type=\"text\" placeholder=\"Usuário (requerido)\" formControlName=\"username\" />\r\n                <!-- <span class=\"text-danger\" *ngIf=\"displayMessage.username\">\r\n                                <p [innerHTML]=\"displayMessage.username\"></p>\r\n                            </span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label class=\"col-md-2 control-label\">Senha</label>\r\n            <div class=\"col-md-10\">\r\n                <!-- <input class=\"form-control\" id=\"password\" type=\"password\" placeholder=\"Senha (requerido)\" formControlName=\"password\" [ngClass]=\"{'is-invalid': displayMessage.password }\" /> -->\r\n                <input class=\"form-control\" id=\"password\" type=\"password\" placeholder=\"Senha (requerido)\" formControlName=\"password\"  />\r\n                <!-- <span class=\"text-danger\" *ngIf=\"displayMessage.password\">\r\n                                <p [innerHTML]=\"displayMessage.password\"></p>\r\n                            </span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <div class=\"col-md-4 col-md-offset-2\">\r\n                <span><button class=\"btn btn-success\" id=\"Login\" type=\"submit\">Login</button></span>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport class GenericValidator {\r\n    constructor(private validationMessages: ValidationMessages) { }\r\n\r\n    processarMensagens(container: FormGroup): { [key: string]: string } {\r\n        let messages = {};\r\n        for (let controlKey in container.controls) {\r\n            if (container.controls.hasOwnProperty(controlKey)) {\r\n                let c = container.controls[controlKey];\r\n\r\n                if (c instanceof FormGroup) {\r\n                    let childMessages = this.processarMensagens(c);\r\n                    Object.assign(messages, childMessages);\r\n                } else {\r\n                    if (this.validationMessages[controlKey]) {\r\n                        messages[controlKey] = '';\r\n                        if ((c.dirty || c.touched) && c.errors) {\r\n                            Object.keys(c.errors).map(messageKey => {\r\n                                if (this.validationMessages[controlKey][messageKey]) {\r\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + '<br />';\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n\r\nexport interface DisplayMessage {\r\n    [key: string]: string\r\n}\r\nexport interface ValidationMessages {\r\n    [key: string]: { [key: string]: string } \r\n}\r\n"],"sourceRoot":"webpack:///"}